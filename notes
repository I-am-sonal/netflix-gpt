pending tasks:
firebase deployment URL is not working
TMDB API link is not working
loggedin Image is showing cropped

---

13-02-2024

Episode-14 | NetflixGPT - The Beginning

Inside folder - command line

> > npx create-react-app netflix-gpt

terminal:

> > npx create-react-app netflix-gpt

it will give a basic project structure
it will create netflix-gpt(folder) project with bundler and has inbuild packages in it
it will have jest inbuild as a testing library.
it has inbuild app.test.js file to test the project.

to run the project:

> > npm run start // or npm start

---

Hot Module Replacement (HMR) for a React App:

What is react-refresh? react-refresh-webpack-plugin is a hot module replacement (HMR) plugin provided by React.
A Webpack plugin to enable "Fast Refresh" (also previously known as Hot Reloading) for React components.

---

Git Initialization:

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/I-am-sonal/netflix-gpt.git
git push -u origin main

---

> > Install Tailwind CSS with Create React App

> > Create your project:
> > npx create-react-app my-project
> > cd my-project

> > Install Tailwind CSS:
> > npm install -D tailwindcss
> > npx tailwindcss init

> > Configure your template paths
> > Add the paths to all of your template files in your tailwind.config.js file.

/** @type {import('tailwindcss').Config} \*/
module.exports = {
content: [
"./src/**/\*.{js,jsx,ts,tsx}",
],
theme: {
extend: {},
},
plugins: [],
}

> > Add the Tailwind directives to your CSS
> > Add the @tailwind directives for each of Tailwind’s layers to your ./src/index.css file.

@tailwind base;
@tailwind components;
@tailwind utilities;

> > Start your build process
> > npm run start

> > Start using Tailwind in your project
> > App.js
> > export default function App() {
> > return (

    <h1 className="text-3xl font-bold underline">
      Hello world!
    </h1>

)
}

---

functional component - short form - rafce

Routing (page navigations):
we need to use createBrowserRouter from react-router-dom

> > npm i -D react-router-dom

import { createBrowserRouter } from 'react-router-dom'

=>To provide the routing

//////////////////////////////////////////////////////////////////////////

> > Forms in React:

If you wants to build large scale forms:
Formik is open source form library for React and React Native.

> > useRef
> > useRef is a React Hook that lets you reference a value that’s not needed for rendering.

> > How to test through Regex:

Regex for email validation

2 ways to get the entered data(values) from the form:

1. using state variables
2. reference using useRef (if we want what user have entered in the input box..
   we need to use the reference of that input box. React gives useRef for it.)

> > After submitted the form page is getting refreshed
> > Because of how the web was designed. HTTP is stateless so any transfer of information between client and server requires a request from client to server.

<form onSubmit={(e) => e.preventDefault()} >
</form>

useRef will return an object,
if you want to check on the entered value use:
console.log(email.current.value);
console.log(password.current.value);
//////////////////////////////////////////////////////////////////////////

example:

Login.js

const Login = () => {

const [errorMessage, setErrorMessage] = useState(null);

const fullName = useRef(null);
const email = useRef(null);
const password = useRef(null);

const handleButtonClick = () => {
//validate the form data

    const message = checkValidData(
      fullName.current.value,
      email.current.value,
      password.current.value
    );
    console.log(fullName.current.value);
    console.log(email.current.value);
    console.log(password.current.value);
    console.log(message);
    setErrorMessage(message);

};

return (

<div>
<Header />
<div className="form-inner justify-center flex">
<form
onSubmit={(e) => e.preventDefault()}
className="my-14 flex flex-col max-w-[450px] min-h-48 bg-black bg-opacity-70 text-white p-20 w-full" >
<h1 className="text-3xl font-bold mb-4">
{isSignInForm ? "Sign In" : "Sign Up"}
</h1>
{!isSignInForm && (
<div>
<input
                ref={fullName}
                type="text"
                className="w-full p-2 my-2 bg-gray-800 bg-transparent border border-white rounded-lg"
                placeholder="Full Name"
              />
<input
                type="text"
                className="w-full p-2 my-2 bg-gray-800 bg-transparent border border-white rounded-lg"
                placeholder="Mobile Number"
              />
</div>
)}
<input
            ref={email}
            type="text"
            className="p-2 my-2 bg-gray-800 bg-transparent border border-white rounded-lg"
            placeholder="Email Address"
          />
<input
            ref={password}
            type="password"
            className="p-2 my-2 bg-gray-800 border border-white rounded-lg"
            placeholder="Password"
          />
<p className="text-red-600 text-sm">{errorMessage}</p>
<button
            className="my-2 p-2 bg-red-700 rounded-lg"
            onClick={handleButtonClick}
          >
{isSignInForm ? "Sign In" : "Sign Up"}
</button>
<p className="my-2 p-2" onClick={toggleSignInForm}>
{isSignInForm
? "New to Netflix? Sign up now."
: "Already registered? Sign In now"}
</p>
</form>
</div>
<Footer />
</div>
);
};

//////////////////////////////////////////////////////////////////////////

validate.js

export const checkValidData = (email, password) => {
//const isFullNameValid = fullName !== "" || null;
const isEmailValid = /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$/.test(
email
);
const isPasswordValid =
/((?=._\d)(?=._[a-z])(?=._[A-Z])(?=._[\W]).{6,20})/.test(password);

if (!isEmailValid) {
return "Email ID is not valid";
}
if (!isPasswordValid) {
return "Password is not valid";
}

return null; // null means email password is valid
};

//////////////////////////////////////////////////////////////////////////

Backend: Firebase

Firebase provides tools to grow your app and business, for startups & global enterprises. Get your app up and running quickly & securely with fully managed backend infrastructure.

A lot of startups use Firebase as backend. it can authenticate, do user login
click here with Google account
validate email and password

Firebase login: https://firebase.google.com/

> > create a project

Get started by adding Firebase to your app >> select web

> > Add Firebase to your web app
> > add NetflixGPT - we can deploy our app to firebase, it gives you server, hosting of app,
> > so that we can give a live url to the project

> > Add Firebase SDK

> > npm install firebase

it will give configuration to connect to our database

> > Install Firebase CLI
> > npm install -g firebase-tools

> > Go to authentication
> > Sign In method -> Sign-in providers -> email password

(it will show error -> disable CORS extension)

Authenticate and manage users from a variety of providers without server-side code

> > firebase login

(it it fails -> Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass)

> > firebase init (it will create forebase config)

Which Firebase features do you want to set up for this directory? Press Space to select features, then Enter to confirm your
choices. (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)

> ( ) Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys

use existing project

> netflixgpt-f1d20 (NetflixGPT)

what do you want to use as your public directory?
build
(in parcel we used to have dist folder )

Firebase initialization complete!

it will create firebase.json and firebaserc files

> > before deploying the project first build the project
> > npm run build

it will create build folder, using this folder we can deploy the project

> > firebase deploy

left navigation - build - hosting:
check https://console.firebase.google.com/project/netflixgpt-f1d20/hosting/sites/netflixgpt-f1d20/domains
or
url: netflixgpt-f1d20.web.app

url: netflixgpt-f1d20.firebaseapp.com

Steps for deployment:
1)install firebase CLI - npm install -g firebase-tools
2)Firebase login - firebase login
3)Initialize Firebase - 'firebase init' then select hosting
4)Deploy command - firebase deploy

if it fails try:
firebase init hosting
(and again do all the commands)

:))

Domains:
netflixgpt-f1d20.web.app
netflixgpt-f1d20.firebaseapp.com

///////
firebase.json

{
"database": {
"rules": "database.rules.json"
},
"hosting": {
"public": "build",
"ignore": [
"firebase.json",
"**/.*",
"**/node_modules/**"
]
}
}

//////////////////////////////////////////////////////////////////////////
2 types of hosting:

1. using "firebase deploy" command you can deploy the code whenever you wish to deploy the project
2. using github hosting ..whenever you push the code, it will automatically deploy the code.

//////////////////////////////////////////////////////////////////////////
Create SignUp user Account in firebase

go to firebase documentation > search authentication > web
Password-Based Accounts
Create a password-based account
API:
Create a new account by passing the new user's email address and password to createUserWithEmailAndPassword:

tab > Web modular API

to use the API
const auth = getAuth();

in all the components again and again, we can call it in the common place
add it inside
firebase.js
import { getAuth } from "firebase/auth";

at the end add and export it:
export const auth = getAuth();

> > import it in login.js

import { createUserWithEmailAndPassword } from "firebase/auth";
import { Auth } from "firebase/auth";
//////////////////////////////////////////////////////////////////////////

> > Create a password-based account
> > Create a new account by passing the new user's email address and password to createUserWithEmailAndPassword:

import {
createUserWithEmailAndPassword,
signInWithEmailAndPassword,
} from "firebase/auth";
import { auth } from "../utils/firebase";

Login.js
(check the else part:)

if (!isSignInForm) {
//Sign Up logic here

      createUserWithEmailAndPassword(
        auth,
        email.current.value,
        password.current.value
      )
        .then((userCredential) => {
          // Signed up
          const user = userCredential.user;
          console.log(user);
        })
        .catch((error) => {
          const errorCode = error.code;
          const errorMessage = error.message;
          setErrorMessage(errorCode + "-" + errorMessage);
        });
    } else {
      // Sign In logic here

      signInWithEmailAndPassword(
        auth,
        email.current.value,
        password.current.value
      )
        .then((userCredential) => {
          // Signed in
          const user = userCredential.user;
          console.log(user);
        })
        .catch((error) => {
          const errorCode = error.code;
          const errorMessage = error.message;
          setErrorMessage(errorCode + "-" + errorMessage);
        });
    }

//////////////////////////////////////////////////////////////////////////

Store User data into the Redux Store:
(we would require user data anytime/anywhere in the app)

> > Redux store Setup:
> > -> npm i -D @reduxjs/toolkit
> > -> npm i react-redux

Steps:
1)Create a store -> appStore.js
2)create a user slice -> userSlice.js
3)Add slice into the store
4)provide the store into the app.js using <provider store="appStore">

appStore.js

import { configureStore } from "@reduxjs/toolkit";
import userReducer from "./userSlice";

const appStore = configureStore({
reducer: {
user: userReducer,
},
});

export default appStore;

---

userSlice.js
import { createSlice } from "@reduxjs/toolkit";

const userSlice = createSlice({
name: "user",
initialState: null,
reducers: {
addUser: (state, action) => {
return action.payload;
},
removeUser: (state, action) => {
return null;
},
},
});

export const { addUser, removeUser } = userSlice.actions;

export default userSlice.reducer;

---

App.js

function App() {
return (
<Provider store={appStore}>

<Body />
</Provider>
);
}

---

> > as soon as user signin or signup we need to update the store with that slice
> > To store the user data into the store we need to dispatch it
> > we need to write dispatch for sign in and sign up also hence to avoid duplication,
> > we will use utility given by firebase "onAuthStateChanged" API
> > this will be called whenver user signin, signup, signout, or any authentication state changes happens
> > its a kind of a event listener

Firebase documentation: manager users
Get the currently signed-in user

write the code into the rootlevel js file (app.js or body.js)

// we need to call this api (event listner only once) -> useEffect with empty parentheses. \***\*\*\*\*\***\*\***\*\*\*\*\***//always use hooks at the top of your component

if user signin/signup -> we will navigate the user to the browse page using
useNavigate hook
import { createBrowserRouter, useNavigate } from "react-router-dom";

Body.js
import { createBrowserRouter, useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { addUser, removeUser } from "../utils/userSlice";

const Body = () => {
const dispatch = useDispatch();
const navigate = useNavigate();

useEffect(() => {
onAuthStateChanged(auth, (user) => {
if (user) {
// User is signed in, see docs for a list of available properties
// https://firebase.google.com/docs/reference/js/auth.user
const { uid, email, displayName } = user;
dispatch(addUser({ uid: uid, email: email, displayName: displayName }));
navigate("/browse");

} else {
// User is signed out
dispatch(removeUser());
navigate("/");

}
});
}, []);
}

imp:\***\*\*\*\*\*\*\***
navigate should be added inside RouterProvider
RouterProvider is in the body.js , so we need to add it inside any child component of it.
hence we will add it in the login.js file now

Login.js (navigate hook)
import { useNavigate } from "react-router-dom";

const Login = () => {
const navigate = useNavigate();

if (!isSignInForm) {
//Sign Up logic here

      createUserWithEmailAndPassword(
        auth,
        email.current.value,
        password.current.value
      )
        .then((userCredential) => {
          // Signed up
          const user = userCredential.user;
          console.log(user);
          navigate("/browse");
        })
        .catch((error) => {
          const errorCode = error.code;
          const errorMessage = error.message;
          setErrorMessage(errorCode + "-" + errorMessage);
        });
    } else {
      // Sign In logic here

      signInWithEmailAndPassword(
        auth,
        email.current.value,
        password.current.value
      )
        .then((userCredential) => {
          // Signed in
          const user = userCredential.user;
          console.log(user);
          navigate("/browse");
        })
        .catch((error) => {
          const errorCode = error.code;
          const errorMessage = error.message;
          setErrorMessage(errorCode + "-" + errorMessage);
        });
    }

}

// it should successfully navigate to the Browse page

///////////////////////////////////////////////////////////
On browse page -> add signout button functionality using "signOut" Api

https://firebase.google.com/docs -> Password Authentication

Header.js

import React from "react";
import { USER_ICON_URL } from "../utils/constant";
import { signOut } from "firebase/auth";
import { auth } from "../utils/firebase";
import { useNavigate } from "react-router-dom";

const Header = () => {
const navigate = useNavigate();

const handleSignOut = () => {
signOut(auth)
.then(() => {
// Sign-out successful.
navigate("/");
})
.catch((error) => {
// An error happened.
navigate("/error");
});
};
return (

<div className="header-inner bg-gradient-to-b from-black px-8 py-2 flex justify-between align-middle">
<div>
<img
          className="w-44"
          src="https://cdn.cookielaw.org/logos/dd6b162f-1a32-456a-9cfe-897231c7763c/4345ea78-053c-46d2-b11e-09adaef973dc/Netflix_Logo_PMS.png"
          alt="logo"
        />
</div>
<div className="flex align-middle">
<img className="h-10" src={USER_ICON_URL} alt="user-icon" />
<button onClick={handleSignOut} className="text-white">
(Sign Out)
</button>
</div>
</div>
);
};

export default Header;

==========================================

Update a user's profile using "updateProfile" api
and
After signup to get the user data (photourl) from the store :
it will update the user icon

Header.js
import { useSelector } from "react-redux";

const user = useSelector((store) => store.user);

        <img className="h-10" src={user.photoURL} alt="user-icon" />

==========================================

TMDB API
its free,
proper doc of latest movies
it gives token , better authentication

==========================================
best place to keep the useEffect in the central place (header.js ) instead of body.js

---

Login functionality
when user loggedin it will redirect to Browse page (try to go to login("/") page..it wont)
when user is logged out it will redirected to login ("/") page (try to go to browse("/browse") page from URL..it wont)

==========================================
Unsubscribing onAuthStateChanged

whenever my component unmounts, unsubscribe the user:
Header.js
useEffect(() => {
const unsubscribe = onAuthStateChanged(auth, (user) => {
}
}
});
// unsubscribe when component unmounts

return () => unsubscribe();
}, []);

==========================================
Adding constants file to the project

# URLs , all hardcoded strings, values all inside "utils/constants.js"

In react Everything happens twice because of the <React.StrictMode>
index.js
React does it to check if any inconsistencies between the calls (it will show twice
only on local (development mode), when you push the build on the production, it will happen only once)

root.render(
<React.StrictMode>
<App />
</React.StrictMode>
);

==========================================
Adding movie data to the store (moviesSlice)

we will create utils/moviesSlice.js and put all movie data inside it

to check the setup is correct:
Redux devtools extension:
it will show "nowPlayingMovies" as null (means our slice is created perfectly fine :)

Browse.js
import { useDispatch } from "react-redux";
import { addNowPlayingMovies } from "../utils/moviesSlice";

const Browse = () => {
const dispatch = useDispatch();
const getNowPlayingMovies = async () => {
const data = await fetch("https://dummyapi.online/api/movies");
const json = await data.json();
console.log(json);

    //dispatch an action
    dispatch(addNowPlayingMovies(json));

};

====================================================================================
20-02-2024
Episode-15 | NetflixGPT - Building the Core

creating custom hooks:
From Browse page the code ( // Fetch NowPlayingMovies data from API and update the store
) is added in new hooks file named hooks/useNowPlayingMovies.js

====================================================================================
MainContainer.js page:

Early return example:

const movies = useSelector((store) => store.movies?.nowPlayingMovies);
// console.log(Movies);
if (movies === null) return; or if (!movies) return;//Early return example
const mainMovie = movies[0];
console.log(mainMovie);
====================================================================================
custom reusable hook to display popular movies:

reference taken from hook file: "useNowPlayingMovies.js"

copy file and rename it to :

> > > "usePopularMovies.js"

1. change function name
2. API url: "https://www.omdbapi.com/?s=popular&apikey=263d22d8"
3. dispatch action name: dispatch(addPopularMovies(json));
4. const getNowPlayingMovies = async () => { function name to getPopularMovies

> > > > moviesSlice.js

1. add new reducer
   addPopularMovies: (state, action) => {
   state.popularMovies = action.payload;
   },

2. export action
   export const { addNowPlayingMovies, addPopularMovies } = moviesSlice.actions;

> > > > > Browse.js

1. call the hook function
   const Browse = () => {
   useNowPlayingMovies();
   usePopularMovies();
